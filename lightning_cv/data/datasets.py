# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01b_data.datasets.ipynb (unless otherwise specified).

__all__ = ['logger', 'ImageFolderDataset']

# Cell
import os
import pandas as pd
from typing import *
from pathlib import Path
import matplotlib.pyplot as plt
from abc import ABC, abstractclassmethod
from fastcore.all import store_attr, ifnone, delegates, patch

import torch
from torch.utils.data import DataLoader, Dataset
from torchvision.datasets.folder import make_dataset

from ..utils.common import default_logger, Registry
from ..utils.data import folder2df, IMG_EXTENSIONS, Loaders
from .transforms import ImageClassificationTransforms

logger = default_logger()

# Cell
class ImageFolderDataset(Dataset):
    "Create `Dataset` instance from `source` using `tfm`"

    def __init__(self, source: Union[str, Path],
                 tfm: ImageClassificationTransforms = None,
                 classes: Dict = None, loader: str = "pil_loader"):

        store_attr("source, tfm")
        self.classes = ifnone(classes, self._find_classes(self.source))
        samples = make_dataset(self.source, self.classes, IMG_EXTENSIONS, None)
        self.loader = Loaders.get(loader)

        self.images  = [s[0] for s in samples]
        self.targets = [s[1] for s in samples]
        logger.info(f"Found {len(self.images)} files belonging to {len(set(self.targets))} classes.")

    def _find_classes(self, dir: str) -> Tuple[List[str], Dict[str, int]]:
        "Finds the class folders in the dataset"
        classes = [d.name for d in os.scandir(dir) if d.is_dir()]
        classes.sort()
        class_to_idx = {cls_name: i for i, cls_name in enumerate(classes)}
        return class_to_idx

    def reload_tfm(self, tfm: ImageClassificationTransforms):
        "reloads the transformations in the `Dataset`"
        self.tfm = tfm

    def __len__(self):
        return len(self.images)

    def __getitem__(self, index):
        image  = self.images[index]
        image  = self.loader(image)
        aug_im = self.tfm(image)
        label  = self.targets[index]
        return aug_im, torch.tensor(label, dtype=torch.long)