# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00a_core.common.ipynb (unless otherwise specified).

__all__ = ['default_logger', 'FORMAT', 'ROOT_NAME', 'ABBREV_NAME', 'imshow_tensor', 'generate_random_id', 'MyBackbone',
           'BACKBONE_REGISTRY']

# Cell
import sys
import uuid
import matplotlib.pyplot as plt
import logging
import loguru
from fvcore.common.registry import Registry
from fastcore.all import delegates
from torchvision.utils import make_grid

# Cell
FORMAT = "<lvl>{level}</lvl> <green>[{time:MM/DD HH:mm:ss} {name}]</green>: {message}"
ROOT_NAME = "lightning_cv"
ABBREV_NAME = "lcv"


@delegates(loguru.logger.add)
def default_logger(
    sink=sys.stdout, level=logging.INFO, format=FORMAT, colorize=True, **kwargs
):
    "default logger for the Library"
    logger = loguru.logger
    logger.remove()
    logger.add(sink, level=level, format=format, colorize=colorize, **kwargs)
    logger = logger.patch(
        lambda record: record.update(
            name=record["name"].replace(ROOT_NAME, ABBREV_NAME)
        )
    )
    return logger

# Cell
@delegates(make_grid)
def imshow_tensor(inp, title=None, **kwargs):
    """Imshow for Tensor and optionally add a `title`"""
    grid = make_grid(inp, **kwargs)
    grid = grid.permute(1, 2, 0).data.numpy()
    plt.imshow(grid)

    if title is not None:
        plt.title(title)

    plt.pause(0.001)

# Cell
def generate_random_id() -> str:
    "generates a random id"
    idx = uuid.uuid1()
    idx = str(idx).split("-")[0]
    return idx

# Cell
Registry.__doc__ = """
The registry that provides `name` -> `object mapping`, to support third-party users' custom modules.
To create `Registery` instance :
```python
BACKBONE_REGISTRY = Registry('BACKBONE')
```

To register an object:
```python
@BACKBONE_REGISTRY.register()
class MyBackbone():
    ...
```
Or :
```python
BACKBONE_REGISTRY.register(MyBackbone)
```
"""