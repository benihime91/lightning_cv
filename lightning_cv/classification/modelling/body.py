# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01c_classification.modelling.body.ipynb (unless otherwise specified).

__all__ = ['has_pool_type', 'create_body', 'CnnBody', 'ModelBody', 'create_cnn_body']

# Cell
from typing import *

import timm
import torch
from torch import nn

import re
from omegaconf import DictConfig
from fastcore.all import use_kwargs_dict

from ...core.layers import *
from ...core.common import Registry
from ...core.layers import ActivationCatalog

# Cell
def _is_pool_type(l):
    return re.search(r'Pool[123]d$', l.__class__.__name__)

# Cell
def has_pool_type(m):
    "Return `True` if `m` is a pooling layer or has one in its children"
    if _is_pool_type(m): return True
    for l in m.children():
        if has_pool_type(l): return True
    return False

# Cell
def create_body(model: nn.Module, cut: Optional[Union[int, Callable]] = None):
    "Cut off the body of a `model` as determined by `cut`"
    if cut is None:
        ll = list(enumerate(model.children()))
        cut = next(i for i,o in reversed(ll) if has_pool_type(o))
    if isinstance(cut, int):
        return nn.Sequential(*list(model.children())[:cut])
    elif callable(cut):
        return cut(model)
    else:
        raise NamedError("cut must be either integer or a function")

# Cell
class CnnBody(nn.Module):
    "default `nn.Module` to create a body for vision applications from `timm`"

    @use_kwargs_dict(keep=True, pretrained=False, num_classes=0, global_pool="")
    def __init__(self, model_name: str, cut=None, act_layer: str=None, **kwargs):
        super(CnnBody, self).__init__()
        # for different activation funtions
        # if act_layer is None then the default activations func will be used
        if act_layer is not None:
            act_layer = ActivationCatalog.get(act_layer)

        net = timm.create_model(model_name, act_layer=act_layer, **kwargs)
        self._cfg = net.default_cfg

        # prepare body
        self.net = create_body(net, cut)

    def forward(self, xb):
        return self.net(xb)

    @classmethod
    def from_config(cls, config: DictConfig):
        "create from a `Omegaconf/ Hydra` config"
        return cls(**config)

    @property
    def default_cfg(self):
        # this default_cfg is usefull incase you want to use TestTimePool from timm
        return self._cfg

    @default_cfg.setter
    def default_cfg(self, x: Dict):
        self._cfg = x

# Cell
ModelBody = Registry("CNN_Body")
ModelBody.register(CnnBody)

# Cell
def create_cnn_body(cfg: DictConfig) -> nn.Module:
    "instante an obj from ModelBody registery using lightning_cv config"
    body = ModelBody.get(cfg.MODEL.BODY.NAME)
    body = body.from_config(cfg.MODEL.BODY.ARGUMENTS)
    return body